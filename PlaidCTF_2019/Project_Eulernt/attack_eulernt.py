import gmpy2
from pwn import *
import random
import math

from decimal import Decimal


def primes(n, prime_numbers = []):
	""" Returns  a list of primes <= n """
	if len(prime_numbers) > 0:
		if prime_numbers[-1] >= n:
			return [p for p in prime_numbers if p <= n]
	else:
		return _generate_primes(n + 1, prime_numbers)

def _limit(n):
	return int(math.ceil(math.sqrt(n)))

def _generate_primes(n, prime_numbers = []):
	start = 3

	if len(prime_numbers) > 0:
		sieve = [False] * prime_numbers[-1]

		start = len(sieve)

		while len(sieve) < n:
			sieve.append(True)

		for p in prime_numbers:
			if p < n:
				sieve[p] = True
	else:
		sieve = [True] * n

	for i in range(start, _limit(n), 2):
		if sieve[i]:
			sieve[i * i :: 2 * i] = [False] * int((n - i * i - 1) / (2 * i) + 1)

	return [2] + [i for i in range(3, n, 2) if sieve[i]]

def is_prime(n, prime_numbers = []):
	""" Returns true if n is prime; otherwise false """
	if n < 2:
		return False

	if len(prime_numbers) == 0 or prime_numbers[-1] < n:
		prime_numbers = _generate_primes(n + 1, prime_numbers)

	for p in prime_numbers:
		if n < p:
			return False
		if n == p:
			return True

	return False

def factor(n, prime_numbers = []):
	""" Returns list of prime factors of a integer """
	factors = []

	if not isinstance(n, int):
		return factors

	n = abs(n)

	if n == 0 or n == 1:
		factors.append(n)
	else:
		limit = _limit(n)

		if len(prime_numbers) == 0 or prime_numbers[-1] < limit:
			prime_numbers = _generate_primes(limit + 1, prime_numbers)

		for p in prime_numbers:
			while True:
				if n % p == 0:
					factors.append(p)

					n = n // p
				else:
					break

			if p > n:
				break

		if n != 1:
			factors.append(n)

		if len(factors) == 0:
			factors.append(n)

	return factors


def multiple(tN_fac):
	result = 1
	for i in tN_fac:
		result*=i
	return result
N = 10334465434588059156093965538297516550622260041682062823432902469783188597914276568552700194849877929894375950252570477080418352732597658745665925604704669227133726477243854317836635130694123893711638533001980496229875665476598568821806170303765540489814402234159901540440432134155844542962445153646330595588291605924429211352279943471372817279938720974895260387784578239150931816946786416232516666251965421919651838044618050991294403546958930745419743836966520198735201123255884089263272829846640538826979843642885775791641575109178753509580001660392092396798648924375401024147883702298145910046889402880394195369984000000000000000000000000000000000000000000000000000000000000000000000000000000000
sN = 3214726338988757399964463840205273148284735043324463579894976679845078166928105412104944973948893914339037572694382785661727648297539107767478128297633669341356440278480314502443731079340424764653103468238563073341496690901434197268615240607985890327844073738551115260849983966971570699838147501655616953786428037017304945538845583678438817092853062


k = (2**182)*(3**93)*(5**45)*(7**31)*(11**18)*(13**15)*(17**12)*(19**9)*(23**7)*(29**6)*(31**6)*(37**5)*(41**3)*(43**4)*(47**4)*(53**3)*(59**3)*(61**3)*(67**2)*(71**2)*(73**2)*(79**2)*(83**2)*(89**2)*(97)*(101)*(103)*(107)*(109)*(113)*(127)*(131)*(137)*(139)*(149)*(151)*(157)*(163)*(167)*(173)*(179)*(181)

k = k*1000006400//(1000000000)
k = k*99999984//(1+99999999)
k = k*9999994432//(1+9999999999)
k = k*1000000079904//(1000000000000)

print(k)

goodness = Decimal(sN) / k
print(goodness)
goodness = Decimal(abs(k - sN)) / sN 
print(goodness)

print(N % k == 0)

if k and N % k == 0 and goodness < 1e-8:
	conn = remote("eulernt.pwni.ng", 5555)
	conn.recvuntil("Enter number: ")
	conn.sendline(str(k))
	
	conn.interactive()
elif k == 0 and goodness < 1e-4:
	print("Good work! You're getting there.")
else:
	print("Nope!")



