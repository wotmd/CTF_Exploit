#!/usr/bin/env python
import sys
import pickle
from z3 import *
import gmpy
import math

from copy import deepcopy

def isprime(n):
	return n > 1 and miller_rabin(n)

def miller_rabin(n, rounds=50):
	assert n > 1
	if not (n & 1): return n == 2
	if n < 15: return n != 9
	d, r = n-1, 0
	while not (d & 1):
		d >>= 1
		r += 1
	assert (d & 1) == 1 and d << r == n-1
	for _ in range(rounds):	
		x = pow(random.randrange(2, n-1), d, n)
		if x == 1 or x == n-1: continue
		for i in range(1, r):
			x = x * x % n
			if x == n-1: break
		else:
			return False
	return True


def main():
	N = 791624863672362607956099356831131364853604534581539305910340202530608819116145635786172280242888006099238658415878726648609085639898441498221890676242989932156153803416798752313174803590881722743224684700892225118961219497620039594839395302098710398557509455737717045746236278723783082574166076253616722351864293093113312339303779100928501715558725523086900830443711904148216534555379563587752574783766585298405162299420015348154910428560999297372318489063379606963196610310541923400713582218574580476129076391874763972417104970428247552426095493102113265356930843209220678746513622763556047230507409813826323653127519641722507761180370551715894779123757799654191386575031709371023058585245770842026072807521354840681453389934373985631297088292594571458141054189461792135505184038113247878020462609475899896639165065556193530858093783580972030229157998906679657691476969608156903485234277862405304786019418734022240703148376923711471550495919780707697498176112050789516280686586774453361477128822533764461655099250507644377378432909816994714226859830198325441550849414355111311567891047645058209193718307670504917114431127025248430544656281369344135327825272092527266146813922316680837029133898187541256581486770086898004104721349717
	A = 20800474461367145273340906691597634098910584848634101425530321090829125122241687879745601849248837998876151999592885721935152548674120399809317994565118852444189251158193986225229214950841679795627758099753351375856214350384902504565070917605339475722050666023289412703507879513606009743774089452299903006910942117062241868053983949068811202383614893148995089157210610010137350618698066200655682358324076086051635412942424101514341843621257447734742388939312643974507540634350698445829827074747244048131430269996635105948318032075354212694854013936053043646732168771012778244153439821689497012763977957502463601486569
	B = 8576238992571591869339367870140218994273542282194520701664348646682391448576106630680498284621212787593356209740914901168733090823371040699948878786651462518529144026837660123406693635154217830755339457596520608787502271941986487262771708521404416352019507024705430920736421058347439358995939039953228936764295191673752730499288133458713995709946983920103441131785342297881050343614665686721597353967276809964115302170170393367543710777834619256462467499921754735442721965580336508363159554886933283178151617020551042141999581756444339357087838568279392954356241659416168338179236507816144395812356271365879641284797
	
	bits = 4096 // 2
	"""
	p = Int('p')
	q = Int('q')
	s = Solver()
	s.add(A*q+B*p == n+1)
	s.add(p >= (1 << (bits-1)))
	s.add(p < (1 << (bits)) - 1)
	s.add(q >= (1 << (bits-1)))
	s.add(q < (1 << (bits)) - 1)
	s.add(p*q == n)
	print(s.check())
	print(s.model())
	"""
	
	D = ((N+1)**2) - 4*B*A*N
	kk, c = gmpy.root(D, 2)

	T = ((N+1)+(kk))//(2*B)
	T = ((N+1)-(kk))//(2*B)
	print(N%T == 0)
	P = T
	Q = N/P
	print(N==P*Q)
	print("p : " + str(P))
	print("q : " + str(Q))
	
	
	
	
if __name__ == '__main__': 
	main()


